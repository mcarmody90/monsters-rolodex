{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","class","src","monster","id","alt","name","username","email","website","company","href","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qVAGaA,G,kBAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,MAAM,QACT,yBAAKA,MAAM,gCACP,yBAAKA,MAAM,iBACX,yBAAKC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,aAAuDC,IAAI,aAEnE,wBAAIJ,MAAM,iBACN,0BAAMA,MAAM,yCACNF,EAAMI,QAAQG,QAI5B,yBAAKL,MAAM,+BACP,yBAAKA,MAAM,aACP,yBAAKA,MAAM,cACP,wBAAIA,MAAM,oBAAV,QACA,2BAAG,2CAAH,IAA4BF,EAAMI,QAAQI,UAC1C,2BAAG,wCAAH,IAAyBR,EAAMI,QAAQK,OACvC,2BAAG,0CAAH,IAA2BT,EAAMI,QAAQM,SACzC,2BAAG,0CAAH,IAA2BV,EAAMI,QAAQO,QAAQJ,OAErD,uBAAGK,KAAI,0CAAqCZ,EAAMI,QAAQG,MAAQL,MAAM,iBAAxE,oBCtBHW,EAAW,SAACb,GAAD,OACtB,yBAAKC,UAAU,aACZD,EAAMc,SAASC,KAAI,SAAAX,GAClB,OAAO,kBAAC,EAAD,CAAMY,IAAKZ,EAAQC,GAAID,QAASA,SCJhCa,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,2BACElB,UAAU,SACVmB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCJKG,E,YACnB,aAAe,IAAD,8BACZ,+CAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,kFAOQ,IAAD,OACnBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAC3BV,SAAUmB,S,+BAMN,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAAhC,GAAO,OAC9CA,EAAQG,KAAK8B,cAAcC,SAASb,EAAYc,wBAElD,OACE,yBAAKtC,UAAU,OACb,gDACA,kBAAC,EAAD,CACEiB,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,SAAUqB,S,GA9BKK,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.366f8f75.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className='card-container'>\r\n      <div class=\"card\">\r\n        <div class=\"card__side card__side--front\">\r\n            <div class=\"card__picture\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"monster\"/>\r\n            </div>\r\n            <h4 class=\"card__heading\">\r\n                <span class=\"card__heading-span card__heading-span\">\r\n                    { props.monster.name }\r\n                </span>\r\n            </h4>\r\n        </div>\r\n        <div class=\"card__side card__side--back\">\r\n            <div class=\"card__cta\">\r\n                <div class=\"card__info\">\r\n                    <h3 class=\"card__info-title\">Info</h3>\r\n                    <p><span>Username:</span> { props.monster.username }</p>\r\n                    <p><span>Email:</span> { props.monster.email }</p>\r\n                    <p><span>Website:</span> { props.monster.website }</p>\r\n                    <p><span>Company:</span> { props.monster.company.name }</p>\r\n                </div>\r\n                <a href={`https://www.google.com/search?q=${props.monster.name}`} class=\"btn btn--blue\">Learn More</a>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/Card'\r\n\r\nexport const CardList = (props) => (\r\n  <div className='card-list'>\r\n    {props.monsters.map(monster => {\r\n      return <Card key={monster.id} monster={monster}/>\r\n    })}\r\n  </div>\r\n)","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className='search'\r\n      type='search'\r\n      placeholder={placeholder}\r\n      onChange={handleChange} \r\n    />\r\n  )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/CardList'\nimport { SearchBox } from './components/search-box/SearchBox'\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentWillMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({\n        monsters: users\n      }))\n  }\n  handleChange = e => {\n    this.setState({ searchField: e.target.value })\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}